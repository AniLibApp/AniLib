query BasicUserQuery($id:Int){
    user: User(id:$id){
        id
        name
        unreadNotificationCount
        options{
            ... userMediaOptions
        }
        mediaListOptions{
            ... userMediaListOptions
        }
    }
}
query UserQuery(
    $userId:Int!,
    $id:Int,
    $name:String
){
    followingPage:Page{
        pageInfo{
            total
        }
        following(userId:$userId){
            __typename
        }
    }

    followerPage:Page{
        pageInfo{
            total
        }
        followers(userId:$userId){
            __typename
        }
    }

    user: User(id:$id, name:$name){
        id
        name
        about
        avatar{
            ... userAvatar
        }
        bannerImage
        isFollowing
        isFollower
        isBlocked
        siteUrl
        stats {
            activityHistory {
                date
                amount
                level
            }
        }
        statistics{
            anime{
                ... userMediaStatistics
            }
            manga{
                ... userMediaStatistics
            }
        }
    }
}


query UserSocialCountQuery(
    $userId:Int!,
){
    followingPage:Page{
        pageInfo{
            total
        }
        following(userId:$userId){
            __typename
        }
    }

    followerPage:Page{
        pageInfo{
            total
        }
        followers(userId:$userId){
            __typename
        }
    }
}

query UserRelationQuery(
    $page: Int!,
    $perPage: Int!,
    $userId:Int!,
    $isFollower: Boolean!
) {
    followersPage: Page(page:$page, perPage:$perPage)  @include(if:$isFollower){
        pageInfo @nonnull{
            ... pageInfo
        }
        followers(userId:$userId){
            ... userRelation
        }
    }

    followingPage: Page(page:$page, perPage:$perPage)  @skip(if:$isFollower){
        pageInfo @nonnull{
            ... pageInfo
        }
        following(userId: $userId){
            ... userRelation
        }
    }
}


query UserStatisticOverviewQuery($id:Int, $name:String,$includeAnime:Boolean!){
    user: User(id:$id, name:$name){
        id
        name
        mediaListOptions{
            scoreFormat
        }
        statistics{
            anime@include(if:$includeAnime){
                ... userStatisticsOverview
            }

            manga @skip(if:$includeAnime){
                ... userStatisticsOverview
            }
        }
    }
}


query UserStatsQuery($id:Int
    , $name:String
    , $sort:[UserStatisticsSort]
    , $includeAnime:Boolean!
    , $includeManga:Boolean!
    , $includeTag:Boolean!
    , $includeGenre:Boolean!
    , $includeStudio:Boolean!
    , $includeStaff:Boolean!
    , $includeVoiceActor:Boolean!){
    user: User(id:$id, name:$name){
        statistics{
            anime @include(if:$includeAnime){
                genres(sort:$sort) @include(if:$includeGenre){
                    count
                    genre
                    minutesWatched
                    meanScore
                    mediaIds
                }
                tags(sort:$sort) @include(if:$includeTag){
                    count
                    tag{
                        id
                        name
                    }
                    minutesWatched
                    meanScore
                    mediaIds
                }
                studios(sort:$sort)  @include(if:$includeStudio){
                    count
                    studio{
                        id
                        name
                    }
                    minutesWatched
                    meanScore
                    mediaIds
                }

                voiceActors(sort:$sort) @include(if:$includeVoiceActor){
                    count
                    meanScore
                    minutesWatched
                    mediaIds
                    voiceActor{
                        ... smallStaff

                    }
                }

                staff(sort:$sort) @include(if:$includeStaff){
                    count
                    meanScore
                    minutesWatched
                    mediaIds
                    staff{
                        ... smallStaff
                    }
                }
            }

            manga @include(if:$includeManga){
                genres(sort:$sort) @include(if:$includeGenre){
                    count
                    mediaIds
                    genre
                    chaptersRead
                    meanScore
                    mediaIds
                }
                tags(sort:$sort) @include(if:$includeTag){
                    count
                    tag{
                        id
                        name
                    }
                    chaptersRead
                    meanScore
                    mediaIds
                }
                staff(sort:$sort) @include(if:$includeStaff){
                    count
                    meanScore
                    chaptersRead
                    mediaIds
                    staff{
                        ... smallStaff
                    }
                }
            }
        }
    }
}

query IsFavouriteQuery($mediaId:Int){
    media: Media(id:$mediaId){
        isFavourite
    }
}


fragment userMediaOptions on UserOptions{
    titleLanguage
    displayAdultContent
    airingNotifications
    profileColor
    activityMergeTime
}

fragment userMediaListOptions on MediaListOptions{
    scoreFormat
    rowOrder
    animeList{
        splitCompletedSectionByFormat
        advancedScoringEnabled
        advancedScoring
        customLists
    }
    mangaList{
        splitCompletedSectionByFormat
        advancedScoringEnabled
        advancedScoring
        customLists
    }
}

fragment userAvatar on UserAvatar{
    medium
    large
}

fragment userMediaStatistics on UserStatistics{
    count
    meanScore

    minutesWatched
    episodesWatched

    chaptersRead
    volumesRead

    genres{
        count
        genre
    }
}

fragment userStatisticsOverview on UserStatistics{
    count
    meanScore
    standardDeviation
    minutesWatched
    episodesWatched

    chaptersRead
    volumesRead

    statuses{
        count
        meanScore
        status
        minutesWatched
        chaptersRead
    }
    lengths {
        length
        count
        meanScore
        minutesWatched
        chaptersRead
    }
    scores(sort:[MEAN_SCORE]){
        count
        score
        meanScore
        minutesWatched
        chaptersRead
    }
    formats{
        count
        meanScore
        minutesWatched
        chaptersRead
        format
    }

    countries{
        count
        meanScore
        minutesWatched
        chaptersRead
        country
    }

    releaseYears{
        count
        meanScore
        minutesWatched
        chaptersRead
        releaseYear
    }

    startYears{
        count
        meanScore
        minutesWatched
        chaptersRead
        startYear
    }
}


fragment userRelation on User{
    id
    name
    avatar{
        ... userAvatar
    }
    isFollower
    isFollowing
}